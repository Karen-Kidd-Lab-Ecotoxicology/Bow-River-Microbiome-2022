ASVseq<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\ASV_data_2022_ED_fulldataset_samplesordered.csv")
#The row names have to be the ASV identifier (genetic barcode) in order for it to be read. The following lines of code are to re-organize the row names
n1 <- ASVseq$X #Currently the ASVs are being called "X" in the first column. We want them to be unnamed in the row names column
ASVseq <- ASVseq[,-1] #This removes the first column of the ASV dataframe
rownames(ASVseq) <- n1 #This moves the ASVs to the rownames column of the dataframe
ASVtable <- as.matrix(ASVseq) #must be a matrix so we convert to a matrix
#View(ASVtable) #The ASVs are now the row names
#Importing taxa table
taxonomy <-read.csv ("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\Taxonomy_ED_2022_fulldataset.csv")
#Using the same steps as above with the ASV table to make the genetic barcode the rowname
n2 <- taxonomy$X
taxonomy <- taxonomy[,-1]
rownames(taxonomy) <- n2
taxa_table<-as.matrix(taxonomy) #Turn into a matrix
#View(taxa_table) #ASVs are now the row names
#Importing metadata file
metadata<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\metadata_noKK2078_samples_ordered.csv")
metadata$Site<-factor(metadata$Site, levels=c("Cochrane", "Sunalta", "Cushing Bridge", "Graves Bridge", "Policeman Flats", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Site_code<-factor(metadata$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Stage<-factor(metadata$Stage, levels=c("Larvae", "Adults", "Spiders"))
#Need to make sample names as row names so we follow the same steps as above.
n3 <- metadata$Study_ID
# move names to row headings
metadata <- metadata[,-1]
rownames(metadata) <- n3
#View(metadata) #sample names are now row names
#Combining phyloseq object
ASVtable = otu_table(ASVtable, taxa_are_rows = TRUE) #Taxa are rows means that the ASVs of each identified microbe are the row names which we made sure was true
taxa_table = tax_table(taxa_table)
#Make sure the ASV table and taxa table are both matricies before trying to turn into phyloseq object
ps <- phyloseq(ASVtable, sample_data(metadata), taxa_table)
ps #31,556 taxa, 380 samples
#Need to remove PMF adult caddis because they were contaminated with contaminated laboratory reagents.
samples_to_remove<-c("POLFLT_1_Ad_Caddis_MB_1", "POLFLT_1_Ad_Caddis_MB_2", "POLFLT_1_Ad_Caddis_MB_3", "POLFLT_1_Ad_Caddis_MB_4", "POLFLT_1_Ad_Caddis_MB_5", "POLFLT_1_Ad_Caddis_MB_6", "POLFLT_1_Ad_Caddis_MB_7", "POLFLT_1_Ad_Caddis_MB_8")
ps_pruned<-subset_samples(ps, !(Sample_ID %in% samples_to_remove))
ps_pruned<-prune_taxa(taxa_sums(ps_pruned) > 0, ps_pruned)
ps_pruned #31,185 taxa, 372 samples
#Subset only experimental samples
psexp<-subset_samples(ps_pruned, Sample_Type == "Sample") #Removing ASVs where the abundance is 0 (after removing the blank samples)
psexp<-prune_taxa(taxa_sums(psexp) > 0, psexp)
psexp #30,218 taxa and 349 samples
#Removing Eukaryotes, NAs, Archaea
ps0 <- subset_taxa(psexp, Kingdom == "Bacteria")
ntaxa(psexp)-ntaxa(ps0) #Got rid of 40 ASVs
#Removing low confidence data (where phylum could not be assigned)
ps1<-subset_taxa(ps0, !is.na(Phylum)) #Removes the phyla characterized as NA
ntaxa(ps0) - ntaxa(ps1) #Got rid of 403 ASVs
#Remove Chloroplasts and Mitochondria
ps2<-subset_taxa(ps1, !Order %in% c("","Chloroplast") & !Family %in% c("", "Mitochondria"))
ntaxa(ps1) - ntaxa(ps2) #Got rid of 1824 ASVs
ps3<-ps_prune(ps2, min.reads = 5, min.samples = 2) #Creates an other category that needs to be removed
phyloseq()
#remotes::install_github("Russel88/MicEco")
library(MicEco)
remotes::install_github("Russel88/MicEco")
remotes::install_github("Russel88/MicEco", force=T)
#remotes::install_github("Russel88/MicEco", force=T)
library(MicEco)
install.packages("htmltools")
install.packages("htmltools")
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
library(phyloseq) #phyloseq will be the main package used for structuring microbiome data and diversity comparisons
#BiocManager::install("apeglm")
library(apeglm)
#BiocManager::install("microbiome")
library(microbiome) #For microbiome analyses
library(rlang)
library(glue)
library(ggh4x)
library(viridis)
library(geosphere)
library(car)
library(ggplot2) #For creating graphs
library(ggtext)
library(plyr) #if you load this after dpylr it messes up the dplyr functions
library(dplyr) #Helps with data wrangling
library(cluster) #Used for cluster analyses
library(grid)
library(ape)
library(pals)
library(FSA)
library(multcomp)
library(MASS)
library(glmmTMB)
library(gridExtra)
library(vegan)
library(tidyverse) #data wrangling
#BiocManager::install("PERFect")
library(PERFect) #Permutation filtration for microbiome data. Used when comparing beta diversities across sites/locations.
library(knitr) #For R Markdown knitting
library(kableExtra)
#remotes::install_github("mikemc/speedyseq")
library(speedyseq)
library(colorspace)
library(RColorBrewer)
library(picante)
library(ggpubr)
library(data.table)
library(AICcmodavg)
#devtools::install_github("microsud/microbiomeutilities")
library(microbiomeutilities)
library(imsig)
library(phangorn) #For phylogenetic tree
library(metacoder)
library(tibble)
#BiocManager::install("DESeq2")
library(DESeq2)
library(emmeans)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#Change margin size to be smaller so graphs fit in the plot panel
par(mar = c(2, 2, 2, 2)) # Set the margin on all sides to 2
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
library(phyloseq) #phyloseq will be the main package used for structuring microbiome data and diversity comparisons
#BiocManager::install("apeglm")
library(apeglm)
#BiocManager::install("microbiome")
library(microbiome) #For microbiome analyses
library(rlang)
library(glue)
library(ggh4x)
library(viridis)
library(geosphere)
library(car)
library(ggplot2) #For creating graphs
library(ggtext)
library(plyr) #if you load this after dpylr it messes up the dplyr functions
library(dplyr) #Helps with data wrangling
library(cluster) #Used for cluster analyses
library(grid)
library(ape)
library(pals)
library(FSA)
library(multcomp)
library(MASS)
library(glmmTMB)
library(gridExtra)
library(vegan)
library(tidyverse) #data wrangling
#BiocManager::install("PERFect")
library(PERFect) #Permutation filtration for microbiome data. Used when comparing beta diversities across sites/locations.
library(knitr) #For R Markdown knitting
library(kableExtra)
#remotes::install_github("mikemc/speedyseq")
library(speedyseq)
library(colorspace)
library(RColorBrewer)
library(picante)
library(ggpubr)
library(data.table)
library(AICcmodavg)
#devtools::install_github("microsud/microbiomeutilities")
library(microbiomeutilities)
library(imsig)
library(phangorn) #For phylogenetic tree
library(metacoder)
library(tibble)
#BiocManager::install("DESeq2")
library(DESeq2)
library(emmeans)
library(devtools)
#Importing ASV table
ASVseq<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\ASV_data_2022_ED_fulldataset_samplesordered.csv")
#The row names have to be the ASV identifier (genetic barcode) in order for it to be read. The following lines of code are to re-organize the row names
n1 <- ASVseq$X #Currently the ASVs are being called "X" in the first column. We want them to be unnamed in the row names column
ASVseq <- ASVseq[,-1] #This removes the first column of the ASV dataframe
rownames(ASVseq) <- n1 #This moves the ASVs to the rownames column of the dataframe
ASVtable <- as.matrix(ASVseq) #must be a matrix so we convert to a matrix
#View(ASVtable) #The ASVs are now the row names
#Importing taxa table
taxonomy <-read.csv ("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\Taxonomy_ED_2022_fulldataset.csv")
#Using the same steps as above with the ASV table to make the genetic barcode the rowname
n2 <- taxonomy$X
taxonomy <- taxonomy[,-1]
rownames(taxonomy) <- n2
taxa_table<-as.matrix(taxonomy) #Turn into a matrix
#View(taxa_table) #ASVs are now the row names
#Importing metadata file
metadata<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\metadata_noKK2078_samples_ordered.csv")
metadata$Site<-factor(metadata$Site, levels=c("Cochrane", "Sunalta", "Cushing Bridge", "Graves Bridge", "Policeman Flats", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Site_code<-factor(metadata$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Stage<-factor(metadata$Stage, levels=c("Larvae", "Adults", "Spiders"))
#Need to make sample names as row names so we follow the same steps as above.
n3 <- metadata$Study_ID
# move names to row headings
metadata <- metadata[,-1]
rownames(metadata) <- n3
#View(metadata) #sample names are now row names
#Combining phyloseq object
ASVtable = otu_table(ASVtable, taxa_are_rows = TRUE) #Taxa are rows means that the ASVs of each identified microbe are the row names which we made sure was true
taxa_table = tax_table(taxa_table)
#Make sure the ASV table and taxa table are both matricies before trying to turn into phyloseq object
ps <- phyloseq(ASVtable, sample_data(metadata), taxa_table)
ps #31,556 taxa, 380 samples
#Need to remove PMF adult caddis because they were contaminated with contaminated laboratory reagents.
samples_to_remove<-c("POLFLT_1_Ad_Caddis_MB_1", "POLFLT_1_Ad_Caddis_MB_2", "POLFLT_1_Ad_Caddis_MB_3", "POLFLT_1_Ad_Caddis_MB_4", "POLFLT_1_Ad_Caddis_MB_5", "POLFLT_1_Ad_Caddis_MB_6", "POLFLT_1_Ad_Caddis_MB_7", "POLFLT_1_Ad_Caddis_MB_8")
ps_pruned<-subset_samples(ps, !(Sample_ID %in% samples_to_remove))
ps_pruned<-prune_taxa(taxa_sums(ps_pruned) > 0, ps_pruned)
ps_pruned #31,185 taxa, 372 samples
#Subset only experimental samples
psexp<-subset_samples(ps_pruned, Sample_Type == "Sample") #Removing ASVs where the abundance is 0 (after removing the blank samples)
psexp<-prune_taxa(taxa_sums(psexp) > 0, psexp)
psexp #30,218 taxa and 349 samples
#Removing Eukaryotes, NAs, Archaea
ps0 <- subset_taxa(psexp, Kingdom == "Bacteria")
ntaxa(psexp)-ntaxa(ps0) #Got rid of 40 ASVs
#Removing low confidence data (where phylum could not be assigned)
ps1<-subset_taxa(ps0, !is.na(Phylum)) #Removes the phyla characterized as NA
ntaxa(ps0) - ntaxa(ps1) #Got rid of 403 ASVs
#Remove Chloroplasts and Mitochondria
ps2<-subset_taxa(ps1, !Order %in% c("","Chloroplast") & !Family %in% c("", "Mitochondria"))
ntaxa(ps1) - ntaxa(ps2) #Got rid of 1824 ASVs
ps3<-ps_prune(ps2, min.reads = 5, min.samples = 2) #Creates an other category that needs to be removed
install.packages(c("BH", "castor", "cli", "compositions", "cplm", "curl", "DBI", "DescTools", "digest", "emmeans", "expm", "FNN", "ggh4x", "ggordiplots", "ggrepel", "glue", "gmp", "htmltools", "httpuv", "later", "Matrix", "MCMCpack", "optparse", "patchwork", "pkgload", "plotly", "processx", "ps", "psych", "Rcpp", "RCurl", "readr", "reprex", "rlang", "roxygen2", "rticles", "segmented", "svglite", "timechange", "timeSeries", "unmarked", "uuid", "vipor", "xml2", "yaml", "yulab.utils", "zCompositions"))
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
library(phyloseq) #phyloseq will be the main package used for structuring microbiome data and diversity comparisons
#BiocManager::install("apeglm")
library(apeglm)
#BiocManager::install("microbiome")
library(microbiome) #For microbiome analyses
library(rlang)
library(glue)
library(ggh4x)
library(viridis)
library(geosphere)
library(car)
library(ggplot2) #For creating graphs
library(ggtext)
library(plyr) #if you load this after dpylr it messes up the dplyr functions
library(dplyr) #Helps with data wrangling
library(cluster) #Used for cluster analyses
library(grid)
library(ape)
library(pals)
library(FSA)
library(multcomp)
library(MASS)
library(glmmTMB)
library(gridExtra)
library(vegan)
library(tidyverse) #data wrangling
#BiocManager::install("PERFect")
library(PERFect) #Permutation filtration for microbiome data. Used when comparing beta diversities across sites/locations.
library(knitr) #For R Markdown knitting
library(kableExtra)
#remotes::install_github("mikemc/speedyseq")
library(speedyseq)
library(colorspace)
library(RColorBrewer)
library(picante)
library(ggpubr)
library(data.table)
library(AICcmodavg)
#devtools::install_github("microsud/microbiomeutilities")
library(microbiomeutilities)
library(imsig)
library(phangorn) #For phylogenetic tree
library(metacoder)
library(tibble)
#BiocManager::install("DESeq2")
library(DESeq2)
library(emmeans)
library(devtools)
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
library(htmltools)
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
library(phyloseq) #phyloseq will be the main package used for structuring microbiome data and diversity comparisons
#BiocManager::install("apeglm")
library(apeglm)
#BiocManager::install("microbiome")
library(microbiome) #For microbiome analyses
library(rlang)
library(glue)
library(ggh4x)
library(viridis)
library(geosphere)
library(car)
library(ggplot2) #For creating graphs
library(ggtext)
library(plyr) #if you load this after dpylr it messes up the dplyr functions
library(dplyr) #Helps with data wrangling
library(cluster) #Used for cluster analyses
library(grid)
library(ape)
library(pals)
library(FSA)
library(multcomp)
library(MASS)
library(glmmTMB)
library(gridExtra)
library(vegan)
library(tidyverse) #data wrangling
#BiocManager::install("PERFect")
library(PERFect) #Permutation filtration for microbiome data. Used when comparing beta diversities across sites/locations.
library(knitr) #For R Markdown knitting
library(kableExtra)
#remotes::install_github("mikemc/speedyseq")
library(speedyseq)
library(colorspace)
library(RColorBrewer)
library(picante)
library(ggpubr)
library(data.table)
library(AICcmodavg)
#devtools::install_github("microsud/microbiomeutilities")
library(microbiomeutilities)
library(imsig)
library(phangorn) #For phylogenetic tree
library(metacoder)
library(tibble)
#BiocManager::install("DESeq2")
library(DESeq2)
library(emmeans)
library(devtools)
#install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
#BiocManager::install("mia")
library(mia)
library(factoextra)
#install.packages("microViz", repos = c(davidbarnett = "https://david-barnett.r-universe.dev", getOption("repos")))
library(microViz)
#remotes::install_github("vmikk/metagMisc")
library(metagMisc)
#BiocManager::install("decontam")
library(decontam)
#BiocManager::install("dada2", version = "3.16") 3.16 with R v 4.2.3, 3.17 with R v 4.3.2
library(dada2)
library(forcats)
library(ggpubr)
#remotes::install_github("kstagaman/phyloseqCompanion")
library(phyloseqCompanion)
#BiocManager::install("ANCOMBC")
library(ANCOMBC)
#devtools::install_github("Russel88/DAtest")
library(DAtest)
#remotes::install_github("Russel88/MicEco", force=T)
library(MicEco)
library(readxl)
library(rdacca.hp) #Used to determine importance of each explanatory variable in RDA
library(GGally) #Used to plot Spearman correlations
library(biomformat)
#install_github("helixcn/seqRFLP")
library(seqRFLP) #Used to save files as .fasta
library(MicEco)
install_github("helixcn/seqRFLP")
#install_github("helixcn/seqRFLP")
library(seqRFLP) #Used to save files as .fasta
#Importing ASV table
ASVseq<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\ASV_data_2022_ED_fulldataset_samplesordered.csv")
#The row names have to be the ASV identifier (genetic barcode) in order for it to be read. The following lines of code are to re-organize the row names
n1 <- ASVseq$X #Currently the ASVs are being called "X" in the first column. We want them to be unnamed in the row names column
ASVseq <- ASVseq[,-1] #This removes the first column of the ASV dataframe
rownames(ASVseq) <- n1 #This moves the ASVs to the rownames column of the dataframe
ASVtable <- as.matrix(ASVseq) #must be a matrix so we convert to a matrix
#View(ASVtable) #The ASVs are now the row names
#Importing taxa table
taxonomy <-read.csv ("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\Taxonomy_ED_2022_fulldataset.csv")
#Using the same steps as above with the ASV table to make the genetic barcode the rowname
n2 <- taxonomy$X
taxonomy <- taxonomy[,-1]
rownames(taxonomy) <- n2
taxa_table<-as.matrix(taxonomy) #Turn into a matrix
#View(taxa_table) #ASVs are now the row names
#Importing metadata file
metadata<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\metadata_noKK2078_samples_ordered.csv")
metadata$Site<-factor(metadata$Site, levels=c("Cochrane", "Sunalta", "Cushing Bridge", "Graves Bridge", "Policeman Flats", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Site_code<-factor(metadata$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Stage<-factor(metadata$Stage, levels=c("Larvae", "Adults", "Spiders"))
#Need to make sample names as row names so we follow the same steps as above.
n3 <- metadata$Study_ID
# move names to row headings
metadata <- metadata[,-1]
rownames(metadata) <- n3
#View(metadata) #sample names are now row names
#Combining phyloseq object
ASVtable = otu_table(ASVtable, taxa_are_rows = TRUE) #Taxa are rows means that the ASVs of each identified microbe are the row names which we made sure was true
taxa_table = tax_table(taxa_table)
#Make sure the ASV table and taxa table are both matricies before trying to turn into phyloseq object
ps <- phyloseq(ASVtable, sample_data(metadata), taxa_table)
ps #31,556 taxa, 380 samples
#Need to remove PMF adult caddis because they were contaminated with contaminated laboratory reagents.
samples_to_remove<-c("POLFLT_1_Ad_Caddis_MB_1", "POLFLT_1_Ad_Caddis_MB_2", "POLFLT_1_Ad_Caddis_MB_3", "POLFLT_1_Ad_Caddis_MB_4", "POLFLT_1_Ad_Caddis_MB_5", "POLFLT_1_Ad_Caddis_MB_6", "POLFLT_1_Ad_Caddis_MB_7", "POLFLT_1_Ad_Caddis_MB_8")
ps_pruned<-subset_samples(ps, !(Sample_ID %in% samples_to_remove))
ps_pruned<-prune_taxa(taxa_sums(ps_pruned) > 0, ps_pruned)
ps_pruned #31,185 taxa, 372 samples
#Subset only experimental samples
psexp<-subset_samples(ps_pruned, Sample_Type == "Sample") #Removing ASVs where the abundance is 0 (after removing the blank samples)
psexp<-prune_taxa(taxa_sums(psexp) > 0, psexp)
psexp #30,218 taxa and 349 samples
#Removing Eukaryotes, NAs, Archaea
ps0 <- subset_taxa(psexp, Kingdom == "Bacteria")
ntaxa(psexp)-ntaxa(ps0) #Got rid of 40 ASVs
#Removing low confidence data (where phylum could not be assigned)
ps1<-subset_taxa(ps0, !is.na(Phylum)) #Removes the phyla characterized as NA
ntaxa(ps0) - ntaxa(ps1) #Got rid of 403 ASVs
#Remove Chloroplasts and Mitochondria
ps2<-subset_taxa(ps1, !Order %in% c("","Chloroplast") & !Family %in% c("", "Mitochondria"))
ntaxa(ps1) - ntaxa(ps2) #Got rid of 1824 ASVs
ps3<-ps_prune(ps2, min.reads = 5, min.samples = 2) #Creates an other category that needs to be removed
others = c("Others")
allTaxa = taxa_names(ps3)
allTaxa <- allTaxa[!(allTaxa %in% others)] #removes others from taxa names
ps3 = prune_taxa(allTaxa, ps3)
ps3 #8,422, 349 samples
sample_ps <- subset_samples(ps3, sample_sums(ps3) > 2000)
sample_ps<-prune_taxa(taxa_sums(sample_ps) > 0, sample_ps)
sort(sample_sums(sample_ps)) #Minimum sampling depth is now 2010 reads.
sample_ps #8419 taxa, 331 samples.
total_reads_final <- taxa_sums(sample_ps)
print(sum(total_reads_final)) #Total number of reads is now 10,563,362.
#Normalize the filtered data by relative abundance
Bow_ps<-subset_samples(sample_ps, Stream_Type=="Bow River")
Bow_rel_abun  = transform_sample_counts(Bow_ps, function(x) x/sum(x))
Bow_bray = phyloseq::distance(Bow_rel_abun, method="bray") #Bray Curtis distance matrix
ord_Bow = ordinate(Bow_rel_abun, method="PCoA", distance=Bow_bray) #Ordinate using PCoA
#Scree plot of PCoA
scree <- plot_scree(ord_Bow)
scree + theme(axis.text.x=element_text(size=8, color="black"), axis.text.y=element_text(size=18, color="black"),
axis.text=element_text(size=18, color="black"), axis.title=element_text(size=18))
metadata_Bow <- data.frame(sample_data(Bow_rel_abun))
hydro_Bow<-subset_samples(Bow_ps, Family=="Hydropsychidae")
Bow_rel_abun_hydro  = transform_sample_counts(hydro_Bow, function(x) x/sum(x))
Bow_bray_hydro = phyloseq::distance(Bow_rel_abun_hydro, method="bray")
metadata_Bow_hydro <- data.frame(sample_data(Bow_rel_abun_hydro))
test.adonis.Bow.hydro <- adonis2(Bow_bray_hydro ~ Site, data = metadata_Bow_hydro)
test.adonis.Bow.hydro #p<0.001
#Pairwise comparisons
pairwise.adonis2(Bow_bray_hydro ~ Site, data = metadata_Bow_hydro)
hep_Bow<-subset_samples(Bow_ps, Family=="Heptageniidae")
Bow_rel_abun_hep  = transform_sample_counts(hep_Bow, function(x) x/sum(x))
Bow_bray_hep = phyloseq::distance(Bow_rel_abun_hep, method="bray")
metadata_Bow_hep <- data.frame(sample_data(Bow_rel_abun_hep))
test.adonis.Bow.hep <- adonis2(Bow_bray_hep ~ Site, data = metadata_Bow_hep)
test.adonis.Bow.hep #p<0.001.
#Pairwise comparisons
pairwise.adonis2(Bow_bray_hep ~ Site, data = metadata_Bow_hep)
chiro_Bow<-subset_samples(Bow_ps, Family=="Chironomidae")
Bow_rel_abun_chiro  = transform_sample_counts(chiro_Bow, function(x) x/sum(x))
Bow_bray_chiro = phyloseq::distance(Bow_rel_abun_chiro, method="bray")
metadata_Bow_chiro <- data.frame(sample_data(Bow_rel_abun_chiro))
test.adonis.Bow.chiro <- adonis2(Bow_bray_chiro ~ Site, data = metadata_Bow_chiro)
test.adonis.Bow.chiro #p=0.091.
#Pairwise comparisons
pairwise.adonis2(Bow_bray_chiro ~ Site, data = metadata_Bow_chiro)
test.adonis.Bow.chiro <- adonis2(Bow_bray_chiro ~ Site, data = metadata_Bow_chiro)
test.adonis.Bow.chiro #p=0.07.
perl_Bow<-subset_samples(Bow_ps, Family=="Perlidae")
Bow_rel_abun_perl  = transform_sample_counts(perl_Bow, function(x) x/sum(x))
Bow_bray_perl = phyloseq::distance(Bow_rel_abun_perl, method="bray")
metadata_Bow_perl <- data.frame(sample_data(Bow_rel_abun_perl))
test.adonis.Bow.perl <- adonis2(Bow_bray_perl ~ Site, data = metadata_Bow_perl)
test.adonis.Bow.perl #p<0.001.
#Pairwise comparisons
pairwise.adonis2(Bow_bray_perl ~ Site, data = metadata_Bow_perl)
trichop_Bow<-subset_samples(Bow_ps, Family=="Trichoptera")
Bow_rel_abun_trichop  = transform_sample_counts(trichop_Bow, function(x) x/sum(x))
Bow_bray_trichop = phyloseq::distance(Bow_rel_abun_trichop, method="bray")
metadata_Bow_trichop <- data.frame(sample_data(Bow_rel_abun_trichop))
test.adonis.Bow.trichop <- adonis2(Bow_bray_trichop ~ Site, data = metadata_Bow_trichop)
test.adonis.Bow.trichop #p = 0.021
#Pairwise comparisons
pairwise.adonis2(Bow_bray_trichop ~ Site, data = metadata_Bow_trichop)
ephem_Bow<-subset_samples(Bow_ps, Family=="Ephemeroptera")
Bow_rel_abun_ephem = transform_sample_counts(ephem_Bow, function(x) x/sum(x))
Bow_bray_ephem = phyloseq::distance(Bow_rel_abun_ephem, method="bray")
metadata_Bow_ephem <- data.frame(sample_data(Bow_rel_abun_ephem))
test.adonis.Bow.ephem <- adonis2(Bow_bray_ephem ~ Site, data = metadata_Bow_ephem)
test.adonis.Bow.ephem #p < 0.001
#Pairwise comparisons
pairwise.adonis2(Bow_bray_ephem ~ Site, data = metadata_Bow_ephem)
## Diptera ##
dip_Bow<-subset_samples(Bow_ps, Family=="Diptera")
Bow_rel_abun_dip = transform_sample_counts(dip_Bow, function(x) x/sum(x))
Bow_bray_dip = phyloseq::distance(Bow_rel_abun_dip, method="bray")
metadata_Bow_dip <- data.frame(sample_data(Bow_rel_abun_dip))
test.adonis.Bow.dip <- adonis2(Bow_bray_dip ~ Site, data = metadata_Bow_dip)
test.adonis.Bow.dip #p = 0.162
#Pairwise comparisons
pairwise.adonis2(Bow_bray_dip ~ Site, data = metadata_Bow_dip)
aran_Bow<-subset_samples(Bow_ps, Family=="Araneidae")
Bow_rel_abun_aran = transform_sample_counts(aran_Bow, function(x) x/sum(x))
Bow_bray_aran = phyloseq::distance(Bow_rel_abun_aran, method="bray")
metadata_Bow_aran <- data.frame(sample_data(Bow_rel_abun_aran))
test.adonis.Bow.aran <- adonis2(Bow_bray_aran ~ Site, data = metadata_Bow_aran)
test.adonis.Bow.aran #p < 0.001
#Pairwise comparisons
pairwise.adonis2(Bow_bray_aran ~ Site, data = metadata_Bow_aran)
tetra_Bow<-subset_samples(Bow_ps, Family=="Tetragnathidae")
Bow_rel_abun_tetra = transform_sample_counts(tetra_Bow, function(x) x/sum(x))
Bow_bray_tetra = phyloseq::distance(Bow_rel_abun_tetra, method="bray")
metadata_Bow_tetra <- data.frame(sample_data(Bow_rel_abun_tetra))
test.adonis.Bow.tetra <- adonis2(Bow_bray_tetra ~ Site, data = metadata_Bow_tetra)
test.adonis.Bow.tetra #p = 0.574
#Pairwise comparisons
pairwise.adonis2(Bow_bray_tetra ~ Site, data = metadata_Bow_tetra)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#Change margin size to be smaller so graphs fit in the plot panel
par(mar = c(2, 2, 2, 2)) # Set the margin on all sides to 2
