ASVseq<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\ASV_data_2022_ED_fulldataset_samplesordered.csv")
#The row names have to be the ASV identifier (genetic barcode) in order for it to be read. The following lines of code are to re-organize the row names
n1 <- ASVseq$X #Currently the ASVs are being called "X" in the first column. We want them to be unnamed in the row names column
ASVseq <- ASVseq[,-1] #This removes the first column of the ASV dataframe
rownames(ASVseq) <- n1 #This moves the ASVs to the rownames column of the dataframe
ASVtable <- as.matrix(ASVseq) #must be a matrix so we convert to a matrix
#View(ASVtable) #The ASVs are now the row names
#Importing taxa table
taxonomy <-read.csv ("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\Taxonomy_ED_2022_fulldataset.csv")
#Using the same steps as above with the ASV table to make the genetic barcode the rowname
n2 <- taxonomy$X
taxonomy <- taxonomy[,-1]
rownames(taxonomy) <- n2
taxa_table<-as.matrix(taxonomy) #Turn into a matrix
#View(taxa_table) #ASVs are now the row names
#Importing metadata file
metadata<-read.csv("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\Raw data\\metadata_noKK2078_samples_ordered.csv")
metadata$Site<-factor(metadata$Site, levels=c("Cochrane", "Sunalta", "Cushing Bridge", "Graves Bridge", "Policeman Flats", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Site_code<-factor(metadata$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF", "BRR2", "PCR1", "PCR3")) #Order sites
metadata$Stage<-factor(metadata$Stage, levels=c("Larvae", "Adults", "Spiders"))
#Need to make sample names as row names so we follow the same steps as above.
n3 <- metadata$Study_ID
# move names to row headings
metadata <- metadata[,-1]
rownames(metadata) <- n3
#View(metadata) #sample names are now row names
#Combining phyloseq object
ASVtable = otu_table(ASVtable, taxa_are_rows = TRUE) #Taxa are rows means that the ASVs of each identified microbe are the row names which we made sure was true
taxa_table = tax_table(taxa_table)
#Make sure the ASV table and taxa table are both matricies before trying to turn into phyloseq object
ps <- phyloseq(ASVtable, sample_data(metadata), taxa_table)
ps #31,556 taxa, 380 samples
#Need to remove PMF adult caddis because they were contaminated with contaminated laboratory reagents.
samples_to_remove<-c("POLFLT_1_Ad_Caddis_MB_1", "POLFLT_1_Ad_Caddis_MB_2", "POLFLT_1_Ad_Caddis_MB_3", "POLFLT_1_Ad_Caddis_MB_4", "POLFLT_1_Ad_Caddis_MB_5", "POLFLT_1_Ad_Caddis_MB_6", "POLFLT_1_Ad_Caddis_MB_7", "POLFLT_1_Ad_Caddis_MB_8")
ps_pruned<-subset_samples(ps, !(Sample_ID %in% samples_to_remove))
ps_pruned<-prune_taxa(taxa_sums(ps_pruned) > 0, ps_pruned)
ps_pruned #31,185 taxa, 372 samples
#Subset only experimental samples
psexp<-subset_samples(ps_pruned, Sample_Type == "Sample") #Removing ASVs where the abundance is 0 (after removing the blank samples)
psexp<-prune_taxa(taxa_sums(psexp) > 0, psexp)
psexp #30,218 taxa and 349 samples
#Removing Eukaryotes, NAs, Archaea
ps0 <- subset_taxa(psexp, Kingdom == "Bacteria")
ntaxa(psexp)-ntaxa(ps0) #Got rid of 40 ASVs
#Removing low confidence data (where phylum could not be assigned)
ps1<-subset_taxa(ps0, !is.na(Phylum)) #Removes the phyla characterized as NA
ntaxa(ps0) - ntaxa(ps1) #Got rid of 403 ASVs
#Remove Chloroplasts and Mitochondria
ps2<-subset_taxa(ps1, !Order %in% c("","Chloroplast") & !Family %in% c("", "Mitochondria"))
ntaxa(ps1) - ntaxa(ps2) #Got rid of 1824 ASVs
ps3<-ps_prune(ps2, min.reads = 5, min.samples = 2) #Creates an other category that needs to be removed
others = c("Others")
allTaxa = taxa_names(ps3)
allTaxa <- allTaxa[!(allTaxa %in% others)] #removes others from taxa names
ps3 = prune_taxa(allTaxa, ps3)
ps3 #8,422, 349 samples
sample_ps <- subset_samples(ps3, sample_sums(ps3) > 2000)
sample_ps<-prune_taxa(taxa_sums(sample_ps) > 0, sample_ps)
sort(sample_sums(sample_ps)) #Minimum sampling depth is now 2010 reads.
sample_ps #8419 taxa, 331 samples.
total_reads_final <- taxa_sums(sample_ps)
print(sum(total_reads_final)) #Total number of reads is now 10,563,362.
Bow_ps<-subset_samples(sample_ps, Stream_Type=="Bow River")
Bow_ps<-prune_taxa(taxa_sums(Bow_ps) > 0, Bow_ps)
Bow_ps #276 samples, 7527 taxa
print(sum(taxa_sums(Bow_ps))) #8,547,820
ACWA_ps<-subset_samples(sample_ps, Stream_Type=="ACWA Streams")
ACWA_ps<-prune_taxa(taxa_sums(ACWA_ps) > 0, ACWA_ps)
ACWA_ps #55 samples, 3613 taxa
#Abundance distance matrix
#Subset out Graves Bridge because there was no environmental data for that site
ps_Bow_no_grvbr<-subset_samples(sample_ps, Stream_Type=="Bow River" & Site!="Graves Bridge")
#Transform to relative abundances to standardize
Bow_rel_abun_no_grvbr  = transform_sample_counts(ps_Bow_no_grvbr, function(x) x/sum(x))
#Convert to Bray-Curtis distance
Bow_bray_no_grvbr = phyloseq::distance(Bow_rel_abun_no_grvbr, method="bray")
#Convert to data frame so it can be used in vegan
Bow_bray_df_no_grvbr<-as.matrix(Bow_bray_no_grvbr)
Bow_bray_df_no_grvbr<-as.data.frame(Bow_bray_df_no_grvbr)
#Make environmental variable distance matrix
env<-sample_data(Bow_rel_abun_no_grvbr)
env_data<-env[,16:29] #Subset out only the water quality variables
env_scale<-scale(env_data) #Water chem is on different scales so you have to scale it to the same one for comparison
env_dist<-dist(env_scale, method="euclidean") #Turn into a distance matrix
abund_env = mantel(Bow_bray_df_no_grvbr, env_dist, method = "spearman", permutations = 999, na.rm = TRUE)
#Using Spearman correlations because we have non-parametric data (abundance data is usually highly skewed)
abund_env #r = 0.000531, p = 0.452.
#Water temperature
temp <-env_data$Water_Temp
dist.temp = dist(temp, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_temp = mantel(Bow_bray_df_no_grvbr, dist.temp, method = "spearman", permutations = 999, na.rm = TRUE)
abund_temp # Mantel r=0.0144, p=0.164
#Dissolved oxygen
DO<-env_data$Dissolved_oxygen
dist.DO = dist(DO, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_DO = mantel(Bow_bray_df_no_grvbr, dist.DO, method = "spearman", permutations = 999, na.rm = TRUE)
abund_DO # Mantel r=0.00702, p=0.314
#Conductivity
cond<-env_data$Conductivity
dist.cond = dist(cond, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_cond = mantel(Bow_bray_df_no_grvbr, dist.cond, method = "spearman", permutations = 999, na.rm = TRUE)
abund_cond # Mantel r=0.015, p=0.089
#Total Phosphorus
TP<-env_data$Total_Phosphorus
dist.TP = dist(TP, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_TP = mantel(Bow_bray_df_no_grvbr, dist.TP, method = "spearman", permutations = 999, na.rm = TRUE)
abund_TP # Mantel r=0.00403, p=0.384
#Total Dissolved Solids
TDS<-env_data$Total_Dissolved_Solids
dist.TDS = dist(TDS, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_TDS = mantel(Bow_bray_df_no_grvbr, dist.TDS, method = "spearman", permutations = 999, na.rm = TRUE)
abund_TDS # Mantel r=0.0155, p=0.083
#Total Suspended Solids
TSS<-env_data$Total_Suspended_Solids
dist.TSS = dist(TSS, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_TSS = mantel(Bow_bray_df_no_grvbr, dist.TSS, method = "spearman", permutations = 999, na.rm = TRUE)
abund_TSS # Mantel r=0.00072, p=0.461
#Total Organic Carbon
TOC<-env_data$Total_Organic_Carbon
dist.TOC = dist(TOC, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_TOC = mantel(Bow_bray_df_no_grvbr, dist.TOC, method = "spearman", permutations = 999, na.rm = TRUE)
abund_TOC # Mantel r=0.0365, p=0.057
#pH
pH<-env_data$pH
dist.pH = dist(pH, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_pH = mantel(Bow_bray_df_no_grvbr, dist.pH, method = "spearman", permutations = 999, na.rm = TRUE)
abund_pH # Mantel r= -0.0071, p=0.612
#NO3
NO3<-env_data$Nitrate
dist.NO3 = dist(NO3, method = "euclidean")
#Mantel test with Spearman non parametric correlations
abund_NO3 = mantel(Bow_bray_df_no_grvbr, dist.NO3, method = "spearman", permutations = 999, na.rm = TRUE)
abund_NO3 # Mantel r=0.00072, p=0.466
#All data can be used here since we have coordinates for all the sites
#Transform to relative abundances to standardize
Bow_rel_abun  = transform_sample_counts(Bow_ps, function(x) x/sum(x))
#Convert to Bray-Curtis distance
Bow_bray = phyloseq::distance(Bow_rel_abun, method="bray")
#Convert to data frame so it can be used in vegan
Bow_bray_df<-as.matrix(Bow_bray)
Bow_bray_df<-as.data.frame(Bow_bray_df)
#Geographic variable distance matrix
geo_Bow<-sample_data(Bow_rel_abun)
geo_loc_Bow<-geo_Bow[ ,4:5]
geo_Bow_mat<-as.matrix(geo_loc_Bow)
geo_Bow_df<-as.data.frame(geo_Bow_mat)
#longitude and latitude
geo_coord_Bow = data.frame(geo_loc_Bow$Long, geo_loc_Bow$Lat)
d.geo.Bow = distm(geo_coord_Bow, fun = distHaversine)
dist.geo.Bow = as.dist(d.geo.Bow)
abund_geo  = mantel(Bow_bray_df, dist.geo.Bow, method = "spearman", permutations = 999, na.rm = TRUE)
abund_geo #r = 0.00119, p = 0.421
#The MetaCyc abundance data acts as the "ASV" file
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv")
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Common-Name")
View(metacyc_ont)
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Common.Name")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
View(metacyc_ont)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,3)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Common.Name")
#Combining metacyc abundance data with the higher order classifications
metacyc_combined<-dplyr::inner_join(metacyc, metacyc_ont_2, by="Pathways")
#Creating "otu" table
metacyc_only<-metacyc[,!names(metacyc) %in% c("description")] #Remove columns with descriptions so the values can be rounded for the "ASV" table
metacyc_only_column_to_row<-column_to_rownames(metacyc_only, "Pathways")
metacyc_rounded<-ceiling(metacyc_only_column_to_row) #Have to round it to nearest value for it to work
metacyc_rounded_mat<-as.matrix(metacyc_rounded) #Turn into matrix
metacyc_rounded_mat_1 = otu_table(metacyc_rounded_mat, taxa_are_rows = TRUE) #Final table we will use for otu table
#Descriptions of the pathways acts as the taxonomy file
descriptions<-metacyc_combined[,names(metacyc_combined) %in% c("Pathways", "description")]
descriptions_1<-column_to_rownames(descriptions, "Pathways")
descriptions_mat<-as.matrix(descriptions_1)
descriptions_mat_1 = tax_table(descriptions_mat) #Final table to use for taxonomy table
#Metadata is treated the same
metadata_picrust<-sample_ps@sam_data
#Put data all together in phyloseq object
picrust_ps<-phyloseq(metacyc_rounded_mat_1, sample_data(metadata_picrust), descriptions_mat_1)
#How to find the top three phyla across all sites
hydro_Bow_picrust<-subset_samples(picrust_ps, Family=="Hydropsychidae" & Stream_Type=="Bow River") #Subset hydropsychidae
hydro_Bow_picrust_df<-psmelt(hydro_Bow_picrust)
hydro_Bow_glom_picrust = tax_glom(hydro_Bow_picrust, "description") %>% transform_sample_counts(function(x) {x * 100/sum(x)}) #Agglomerate to phylum level
hydro_Bow_descrip_picrust <- psmelt(hydro_Bow_glom_picrust) %>%
as_tibble %>%
dplyr::group_by(description, Site)%>%
dplyr::select(c("Abundance", "description", "Site")) %>%
dplyr::summarise(Mean = mean(Abundance), SD = sd(Abundance)) %>%
arrange(desc(Mean))
# Cochrane #
hydro_coch_picrust<-subset(hydro_Bow_descrip_picrust, Site=="Cochrane")
hydro_coch_picrust_top<-subset(hydro_coch_picrust, Mean > 0)
View(hydro_coch_picrust_top<-hydro_coch_picrust[order(hydro_coch_picrust$Mean, decreasing = TRUE),])
# Bolding individual axes labels #
colorado <- function(src, boulder) {
if (!is.factor(src)) src <- factor(src)                   # make sure it's a factor
src_levels <- levels(src)                                 # retrieve the levels in their order
brave <- boulder %in% src_levels                          # make sure everything we want to make bold is actually in the factor levels
if (any(brave)){
b_pos <- which(src_levels == boulder[1])
for(i in 2:length(boulder)){# if so
# then find out where they are
b_pos <- append(b_pos, which(src_levels == boulder[i]))
}
b_vec <- rep("plain", length(src_levels))               # make'm all plain first
b_vec[b_pos] <- "bold"# make our targets bold
b_vec
# return the new vector
}
}
nsamples(Bow_ps_picrust<-subset_samples(picrust_ps, Stream_Type=="Bow River")) #276
rel_abun_bow <- speedyseq::tax_glom(Bow_ps_picrust, taxrank = "description")
comp_rel_abun_bow <- transform_sample_counts(rel_abun_bow, function(x) x/sum(x))
rel_abun_bow_df <- psmelt(comp_rel_abun_bow)
sample.df.agg_bow <- aggregate(Abundance ~ description + Site_code + Family + Stage, data = rel_abun_bow_df, FUN = mean)
#Top pathways
top_pathways_bow <- sample.df.agg_bow %>%
group_by(description, Site_code) %>%
summarise(Mean = mean(Abundance)) %>%
arrange(-Mean)
top_24_pathways_bow <- top_pathways_bow$description[1:110]
df0_bow <- sample.df.agg_bow %>%
mutate(description = fct_other(description, top_24_pathways_bow))
df0_bow
df0_bow<-aggregate(Abundance~description + Site_code + Family + Stage, data=df0_bow, FUN="sum") #Aggregate again to combine all the 'Other' categories into a single bar on the graph.
length(unique(df0_bow$description)) #26
length(unique(df0_bow$description)) #36
df0_bow$Site_code<-factor(df0_bow$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF"))
df0_bow$Stage<-factor(df0_bow$Stage, levels=c("Larvae", "Adults", "Spiders"))
df0_bow$Family<-factor(df0_bow$Family, levels=c("Hydropsychidae", "Heptageniidae", "Chironomidae", "Perlidae", "Trichoptera", "Ephemeroptera", "Diptera", "Araneidae", "Tetragnathidae"))
toppathwaysplot_bow <- ggplot(df0_bow, aes(x=Site_code, y=Abundance, fill=description)) +
geom_bar(stat="identity", color="black") +
facet_nested_wrap(~Stage + Family, scales="free_x", nrow=1)+
ylab("Mean Relative Abundance") +
theme_bw()+
rremove("grid")+
theme(strip.text = element_text(size = 16, color="black")) +
theme(legend.key.size = unit(0.5, "cm"),
legend.text=element_text(size=14), legend.title=element_text(size=14), legend.position = "right") +
guides (fill=guide_legend(nrow=26)) +
theme(axis.title.y=element_text(size=24),
axis.text.y=element_text(size=18, color="black"),
axis.text.x=element_text(angle=45, hjust=1, size=18, color="black", face=colorado(df0_bow$Site_code, c("GRVBR", "PMF"))),
axis.title.x=element_text(size=24))+
scale_fill_manual(name="MetaCyc Pathways", values=c(as.vector(stepped(20)), "#ff6a06", "#ff8c3f", "#ffae78", "#fed0b1", "#fff2ea", "#43464B"))+
scale_y_continuous(label = scales::percent)+
rremove("grid")+
xlab("Site")
toppathwaysplot_bow
#Top pathways
top_pathways_bow <- sample.df.agg_bow %>%
group_by(description, Site_code) %>%
summarise(Mean = mean(Abundance)) %>%
arrange(-Mean)
top_24_pathways_bow <- top_pathways_bow$description[1:85]
df0_bow <- sample.df.agg_bow %>%
mutate(description = fct_other(description, top_24_pathways_bow))
df0_bow
df0_bow<-aggregate(Abundance~description + Site_code + Family + Stage, data=df0_bow, FUN="sum") #Aggregate again to combine all the 'Other' categories into a single bar on the graph.
length(unique(df0_bow$description)) #36
df0_bow$Site_code<-factor(df0_bow$Site_code, levels=c("COCH", "SUN", "CUSHBR", "GRVBR", "PMF"))
df0_bow$Stage<-factor(df0_bow$Stage, levels=c("Larvae", "Adults", "Spiders"))
df0_bow$Family<-factor(df0_bow$Family, levels=c("Hydropsychidae", "Heptageniidae", "Chironomidae", "Perlidae", "Trichoptera", "Ephemeroptera", "Diptera", "Araneidae", "Tetragnathidae"))
View(df0_bow)
toppathwaysplot_bow <- ggplot(df0_bow, aes(x=Site_code, y=Abundance, fill=description)) +
geom_bar(stat="identity", color="black") +
facet_nested_wrap(~Stage + Family, scales="free_x", nrow=1)+
ylab("Mean Relative Abundance") +
theme_bw()+
rremove("grid")+
theme(strip.text = element_text(size = 16, color="black")) +
theme(legend.key.size = unit(0.5, "cm"),
legend.text=element_text(size=14), legend.title=element_text(size=14), legend.position = "right") +
guides (fill=guide_legend(nrow=26)) +
theme(axis.title.y=element_text(size=24),
axis.text.y=element_text(size=18, color="black"),
axis.text.x=element_text(angle=45, hjust=1, size=18, color="black", face=colorado(df0_bow$Site_code, c("GRVBR", "PMF"))),
axis.title.x=element_text(size=24))+
scale_fill_manual(name="MetaCyc Pathways", values=c(as.vector(stepped(20)), "#ff6a06", "#ff8c3f", "#ffae78", "#fed0b1", "#fff2ea", "#43464B"))+
scale_y_continuous(label = scales::percent)+
rremove("grid")+
xlab("Site")
toppathwaysplot_bow
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
View(metacyc)
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
View(metacyc_ont)
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Ontology...pathway.type")
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Ontology...pathway.type")
View(metacyc)
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = c("site", "rep", "year"),
names_sep = "_",
values_to = "value")
View(pathways_long)
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = c("study_ID"),
names_sep = "_",
values_to = "value")
View(pathways_long)
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Ontology...pathway.type")
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = c("study_ID"),
names_sep = "_",
values_to = "value")
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = ("study_ID"),
names_sep = "_",
values_to = "value")
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = "study_ID",
names_sep = "_",
values_to = "value")
View(pathways_long)
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = "study_ID",
values_to = "value")
pathways_ontology <- pathways_long %>%
left_join(metacyc, by = "Pathway")
pathways_ontology <- pathways_long %>%
left_join(metacyc_ont, by = "Pathway")
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "description" = "Ontology...pathway.type")
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = "study_ID",
values_to = "value")
pathways_ontology <- pathways_long %>%
left_join(metacyc_ont_2, by = "Pathway")
pathways_long <- as.data.frame(metacyc) %>%
pivot_longer(
cols = 2:332,
names_to = "study_ID",
values_to = "value")
pathways_ontology <- pathways_long %>%
left_join(metacyc_ont_2, by = "Pathway")
View(metacyc_ont_2)
View(metacyc)
pathways_ontology <- pathways_long %>%
left_join(metacyc_ont_2, by = "Pathways")
metacyc<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
metacyc<-dplyr::rename(metacyc, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ont<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ont[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "pathway_type" = "Ontology...pathway.type")
pathways_long <- as.data.frame(metacyc) %>%
pivot_longer(
cols = 2:332,
names_to = "study_ID",
values_to = "value")
View(pathways_long)
View(metacyc_ont_2)
pathways_ontology <- pathways_long %>%
left_join(metacyc_ont_2, by = "Pathways")
pathways_ontology <- metacyc_ont_2 %>%
left_join(pathways_long, by = "Pathways")
pathways_ontology <- metacyc_ont_2 %>%
dplyr::left_join(pathways_long, by = "Pathways")
pathways_ontology <- pathways_long %>%
dplyr::left_join(metacyc_ont_2, by = "Pathways")
View(pathways_ontology)
pathways_ontology$pathway_type <- as.factor(pathways_ontology$pathway_type)
View(metacyc)
pathways_ontology <- metacyc %>%
dplyr::left_join(metacyc_ont_2, by = "Pathways")
pathways_ontology$pathway_type <- as.factor(pathways_ontology$pathway_type)
#Creating "otu" table
metacyc_only<-[,metacyc !names(metacyc) %in% c("description")] #Remove columns with descriptions so the values can be rounded for the "ASV" table
#Creating "otu" table
metacyc_only<-[metacyc,!names(metacyc) %in% c("pathway_type")] #Remove columns with descriptions so the values can be rounded for the "ASV" table
#Creating "otu" table
metacyc_only<- pathways_ontology %>% dplyr::select(-pathway_type) #Remove columns with descriptions so the values can be rounded for the "ASV" table
metacyc_only_column_to_row<-column_to_rownames(metacyc_only, "Pathways")
metacyc_rounded<-ceiling(metacyc_only_column_to_row) #Have to round it to nearest value for it to work
metacyc_rounded_mat<-as.matrix(metacyc_rounded) #Turn into matrix
metacyc_rounded_mat_1 = otu_table(metacyc_rounded_mat, taxa_are_rows = TRUE) #Final table we will use for otu table
#Descriptions of the pathways acts as the taxonomy file
descriptions<-metacyc_combined[,names(metacyc_combined) %in% c("Pathways", "pathway_type")]
descriptions_1<-column_to_rownames(descriptions, "Pathways")
descriptions_mat<-as.matrix(descriptions_1)
descriptions_mat_1 = tax_table(descriptions_mat) #Final table to use for taxonomy table
#Metadata is treated the same
metadata_picrust<-sample_ps@sam_data
#Put data all together in phyloseq object
picrust_ps<-phyloseq(metacyc_rounded_mat_1, sample_data(metadata_picrust), descriptions_mat_1)
View(pathways_ontology)
View(metadata_picrust)
metadata_picrust_1<-rownames_to_column(metadata_picrust, "study_ID")
View(metadata_picrust_1)
metadata_picrust_1<-rownames_to_column(metadata_picrust, rownames="study_ID")
metadata_picrust_1<-dplyr::rownames_to_column(metadata_picrust, "study_ID")
metadata_picrust_1<-tibble:rownames_to_column(metadata_picrust, "study_ID")
metadata_picrust_1<-tibble::rownames_to_column(metadata_picrust, "study_ID")
metadata_picrust_1<-tibble::rownames_to_column(metadata_picrust, study_ID)
#Metadata is treated the same
metadata_picrust<-sample_ps@sam_data
#Metadata is treated the same
metadata_picrust<-as.data.frame(sample_ps@sam_data)
metadata_picrust_1<-tibble::rownames_to_column(metadata_picrust, study_ID)
View(metadata_picrust)
metadata_picrust_1<-tibble::rownames_to_column(metadata_picrust, "study_ID")
View(metadata_picrust_1)
metacyc_metadata<-
pathways_long <- metacyc %>%
pivot_longer(
cols = 2:332,
names_to = c("study_ID"),
values_to = "value")
pathways_ontology <- pathways_long %>%
dplyr::left_join(metacyc_metadata, by = "Pathways")
View(pathways_long)
picrust_out<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
picrust_out<-dplyr::rename(metacyc, "Pathways" = "pathway")
View(picrust_out)
picrust_out<-dplyr::rename(picrust_out, "Pathways" = "pathway")
#Names of pathways and classification
metacyc_ontology<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ontology[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "pathway_type" = "Ontology...pathway.type")
picrust_metadata<-sample_data(sample_ps)
View(picrust_metadata)
picrust_metadata_1<-rownames(picrust_metadata)
picrust_metadata_2<-cbind(picrust_metadata, picrust_metadata_1)
View(picrust_metadata_2)
picrust_long <- picrust %>%
pivot_longer(
cols = 2:332,
names_to = c("study_ID"),
values_to = "value")
picrust_long <- picrust_out %>%
pivot_longer(
cols = 2:332,
names_to = c("study_ID"),
values_to = "value")
picrust_metadata_2<-dplyr::rename(picrust_metadata_2, "study_ID" = "picrust_metadata_1")
picrust_comb <- picrust_long %>%
dplyr::left_join(picrust_metadata_2, by = "study_ID")
View(picrust_comb)
#Names of pathways and classification
metacyc_ontology<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\MetaCyc_Ontology.txt", header=T)
metacyc_ont_1<-as.data.frame(metacyc_ontology[,c(1,15)])
metacyc_ont_2<-dplyr::rename(metacyc_ont_1, "pathway_type" = "Ontology...pathway.type")
pathways_ontology <- picrust_comb %>%
dplyr::left_join(metacyc_ont_2, by = "Pathways")
pathways_ontology$pathway_type <- as.factor(pathways_ontology$pathway_type)
View(pathways_ontology)
View(picrust_out)
pathways_sep<- pathways_ontrology %>% separate_rows(pathway_type, sep = " // ", convert = TRUE)
pathways_sep<- pathways_ontology %>% separate_rows(pathway_type, sep = " // ", convert = TRUE)
View(pathways_sep)
str_split_fixed(pathways_ontology$pathway_type, ' ', 2)
str_split_fixed(pathways_ontology$pathway_type, '// ', 2)
pathways_sep<-str_split_fixed(pathways_ontology$pathway_type, '//', 2)
View(pathways_sep)
pathways_sep<-separate(pathways_ontology$pathway_type, '//')
pathways_sep<-separate(pathways_ontology, pathway_type, '//')
View(pathways_sep)
pathways_sep<-separate(pathways_ontology, pathway_type, '//',5)
pathways_sep<-strsplit(as.character(pathways_ontology$pathway_type),'//')
picrust_out<-read.delim("C:\\Users\\Emilie\\Documents\\GitHub\\Bow-River-Microbiome-2022\\microbiome_analysis\\PICRUSt2 Data\\picrust2_out_pipeline\\pathways_out\\path_abun_unstrat.tsv") #Loading in picrust output
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) #Clears environment
#Change margin size to be smaller so graphs fit in the plot panel
par(mar = c(2, 2, 2, 2)) # Set the margin on all sides to 2
